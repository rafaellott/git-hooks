#!/usr/bin/env python3
import json
import re
import subprocess
import sys
from pathlib import Path

# Getting the commit message
COMMIT_MSG_FILE = sys.argv[1]

COMMIT_MSG = ''.join(Path(COMMIT_MSG_FILE).open(mode="r").readlines())

# Getting git project name
GIT_CMD = "git remote get-url origin"
CMD_RESPONSE = subprocess.run(
    GIT_CMD,
    stdout=subprocess.PIPE,
    stderr=subprocess.DEVNULL,
    shell=True
)
if CMD_RESPONSE.returncode > 0:
    raise ValueError("This command must be executed inside a valid git directory.")
if not CMD_RESPONSE.stdout:
    raise ValueError("Git remote is empty.")

# Constants
GIT_URL = CMD_RESPONSE.stdout.decode().strip()

GIT_REPO_NAME_PATTERN = re.fullmatch(r".*[\/|\:](.*)\/(.*)\.git", GIT_URL)

if not GIT_REPO_NAME_PATTERN:
    raise ValueError('Invalid git URL where is the repo name')
USER_NAME, PROJECT_NAME = GIT_REPO_NAME_PATTERN.groups()

# Loading the users configuration file for git-hook
CONFIG_FILE_STREAM = Path.home().joinpath(".git-hooks-config.json").open(mode="r")
CONFIGS = json.load(CONFIG_FILE_STREAM)

project_conf = CONFIGS.get(USER_NAME)
if not project_conf:
    project_conf = CONFIGS.get(PROJECT_NAME)

# check if project is enabled
if not project_conf:
    sys.exit(0)
elif COMMIT_MSG.startswith("#"):
    raise ValueError("Please commit with option '-m'.\nEx.: git commit -m '<YOUR_COMMIT_MESSAGE>'")

try:
    print('YOUR MESSAGE -> "{}"'.format(COMMIT_MSG))
    MESSAGE_SPLIT = COMMIT_MSG.split(";")
    NEW_MESSAGE = project_conf['format'].format(*MESSAGE_SPLIT)
except IndexError:
    ERROR_MESSAGE = project_conf.get(
        'help', 'Commit message not following format:\n{}'.format(project_conf['format'])
    )
    raise ValueError(ERROR_MESSAGE)
except Exception as error:
    raise ValueError("An error occurred: {}".format(error))

Path(COMMIT_MSG_FILE).open(mode="r+").write(NEW_MESSAGE)

sys.exit(0)
